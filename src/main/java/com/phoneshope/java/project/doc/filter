//    @Override
//    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
//            throws ServletException, IOException {
//        String authorizationHeader = request.getHeader("Authorization");
//        if(Objects.isNull(authorizationHeader) || !authorizationHeader.startsWith("Bearer ")) {
//            filterChain.doFilter(request, response);
//            return;
//        }
//
//        String token = authorizationHeader.replace("Bearer ", "");
//        String secretKey ="abcddfdsf1243abcddfdsf1243abcddfdsf1243";
//
//        try {
//            Jws<Claims> claimsJws = Jwts.parser()
//                    .setSigningKey(Keys.hmacShaKeyFor(secretKey.getBytes()))
//                    .parseClaimsJws(token);
//
//            Claims body = claimsJws.getBody();
//            String username = body.getSubject();
//            List<Map<String, String>> authorities = (List<Map<String, String>>) body.get("authorities");
//
//            Set<SimpleGrantedAuthority> grantedAuthorities = authorities.stream()
//                    .map(x -> new SimpleGrantedAuthority(x.get("authority")))
//                    .collect(Collectors.toSet());
//
//            Authentication authentication = new UsernamePasswordAuthenticationToken(username, null, grantedAuthorities);
//            SecurityContextHolder.getContext().setAuthentication(authentication);
//            filterChain.doFilter(request, response);
//        }catch(ExpiredJwtException e) {
//            log.info(e.getMessage());
//            //e.printStackTrace();
//            throw new ApiException(HttpStatus.BAD_REQUEST, e.getMessage());
//        }
//    }








    //    @GetMapping("filter")
//    public ResponseEntity<?> getBrandsByName (@RequestParam("name") String name){
//        List<BrandDto> listBrand=brandService.getBrandsByName(name)
//                .stream()
//                .map(BrandMapper.INSTANCE::toBrandDto)
//                .collect(Collectors.toList());
//        return  ResponseEntity.ok(listBrand);
//    }



//    @Override
//    public List<Brand> getBrands(Map<String, String> params) {
//        BrandFilter brandFilter= new BrandFilter();
//        if (params.containsKey("name")){
//            String  name = params.get("name");
//            brandFilter.setName(name);
//        }
//        if (params.containsKey("id")){
//            String  id = params.get("id");
//            brandFilter.setId(Integer.parseInt(id));
//        }
//
//        BrandSpec brandSpec = new BrandSpec(brandFilter);
//
//
//        Pageable pageable= PageUtill.getPageable(pageNumber,pageLimit);
//        return    brandRepository.findAll(brandSpec);
//    }


//        Optional<Brand> optionalBrand = brandRepository.findById(id);
//        if (optionalBrand.isPresent()){
//            return optionalBrand.get();
//        }else {
//            throw new HttpClientErrorException(HttpStatus.NOT_FOUND,String.format( "Brand Id =%d Not Found", id));
//        }


//() ->  new HttpClientErrorException(HttpStatus.NOT_FOUND,String.format( "Brand Id =%d Not Found", id))

		/*System.out.println("============");
		boolean existsByName = brandRepository.existsByName("Nokia");
		System.out.println(existsByName);
		System.out.println("============");
		*/